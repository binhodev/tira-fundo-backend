upstream backend {
    server ba    # API endpoints with rate limiting
    location /remove-background {
        # CORS - só aceita do domínio do    # Other API endpoints
    location / {
        # CORS para outras rotas
        add_header Access-Control-Allow-Origin "https://seu-frontend.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, X-Real-IP, X-API-Key" always;
        
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        # Rate limiting mais permissivo para outras rotas
        limit_req zone=api burst=20 nodelay;
        limit_req_status 429;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_Set_header X-Forwarded-Proto $scheme;
        
        # Standard timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }   add_header Access-Control-Allow-Origin "https://seu-frontend.com" always;
        add_header Access-Control-Allow-Methods "POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, X-Real-IP, X-API-Key" always;
        
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        # Validação 1: IP do frontend VPS autorizado
        if ($frontend_allowed = 0) {
            add_header Content-Type application/json always;
            return 403 '{"error": "Acesso negado", "message": "Requisição deve vir do frontend autorizado"}';
        }
        
        # Validação 2: API Key obrigatória
        if ($api_key_valid = 0) {
            add_header Content-Type application/json always;
            return 401 '{"error": "API key inválida", "message": "Chave de autenticação necessária"}';
        }
        
        # Validação 3: IP do usuário deve ser informado
        if ($http_x_real_ip = "") {
            add_header Content-Type application/json always;
            return 400 '{"error": "IP do usuário não informado", "message": "Header X-Real-IP é obrigatório"}';
        }
        
        # Rate limiting: 1 upload por minuto por IP do usuário
        limit_req zone=upload burst=0 nodelay;
        limit_req_status 429;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-User-IP $http_x_real_ip;  # Passa IP do usuário para o backend
        
        # Timeouts for image processing
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings for large files
        proxy_buffering off;
        proxy_request_buffering off;
    }palive 32;
}

server {
    listen 80;
    server_name _;
    
    # Security
    server_tokens off;
      # Health check endpoint (bypass rate limiting)
    location /health {
        # CORS para health check
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # API endpoints with rate limiting
    location /remove-background {
        limit_req zone=upload burst=5 nodelay;
        limit_req_status 429;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts for image processing
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings for large files
        proxy_buffering off;
        proxy_request_buffering off;
    }
      location /batch-remove {
        # CORS - só aceita do domínio do frontend
        add_header Access-Control-Allow-Origin "https://seu-frontend.com" always;
        add_header Access-Control-Allow-Methods "POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, X-Real-IP, X-API-Key" always;
        
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        # Validação 1: IP do frontend VPS autorizado
        if ($frontend_allowed = 0) {
            add_header Content-Type application/json always;
            return 403 '{"error": "Acesso negado", "message": "Requisição deve vir do frontend autorizado"}';
        }
        
        # Validação 2: API Key obrigatória
        if ($api_key_valid = 0) {
            add_header Content-Type application/json always;
            return 401 '{"error": "API key inválida", "message": "Chave de autenticação necessária"}';
        }
        
        # Validação 3: IP do usuário deve ser informado
        if ($http_x_real_ip = "") {
            add_header Content-Type application/json always;
            return 400 '{"error": "IP do usuário não informado", "message": "Header X-Real-IP é obrigatório"}';
        }
        
        # Rate limiting: 1 requisição por minuto por IP do usuário
        limit_req zone=upload burst=0 nodelay;
        limit_req_status 429;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_Set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-User-IP $http_x_real_ip;  # Passa IP do usuário para o backend
        
        # Extended timeouts for batch processing
        proxy_connect_timeout 10s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        proxy_buffering off;
        proxy_request_buffering off;
    }
    
    # Other API endpoints
    location / {
        limit_req zone=api burst=20 nodelay;
        limit_req_status 429;
        
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Standard timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
      # Error pages
    error_page 429 @ratelimit;
    location @ratelimit {
        add_header Content-Type application/json always;
        add_header Access-Control-Allow-Origin "https://seu-frontend.com" always;
        add_header Retry-After 60 always;  # Informa quando tentar novamente
        return 429 '{"error": "Rate limit exceeded", "message": "Você pode fazer apenas 1 upload por minuto. Tente novamente em 60 segundos.", "retry_after": 60}';
    }
    
    error_page 502 503 504 @backend_error;
    location @backend_error {
        add_header Content-Type application/json always;
        add_header Access-Control-Allow-Origin "https://seu-frontend.com" always;
        return 502 '{"error": "Backend unavailable", "message": "Service temporarily unavailable"}';
    }
}
