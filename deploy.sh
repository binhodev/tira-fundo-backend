#!/bin/bash

# Script de Deploy para Produ√ß√£o
# Background Removal API

set -e

echo "üöÄ Iniciando deploy da API de Remo√ß√£o de Fundo..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker n√£o est√° rodando!${NC}"
    exit 1
fi

# Verificar se docker-compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå docker-compose n√£o est√° instalado!${NC}"
    exit 1
fi

# Verificar se arquivo .env existe
if [ ! -f .env ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Arquivo .env n√£o encontrado!${NC}"
    echo "Copiando .env.example para .env..."
    cp .env.example .env
    echo -e "${YELLOW}‚ö†Ô∏è Configure o arquivo .env antes de continuar!${NC}"
    exit 1
fi

# Verificar vari√°veis obrigat√≥rias
if ! grep -q "CORS_ORIGINS.*seudominio" .env; then
    echo -e "${YELLOW}‚ö†Ô∏è Configure o CORS_ORIGINS no arquivo .env para seu dom√≠nio!${NC}"
fi

echo "üìã Verificando estrutura do projeto..."

# Criar diret√≥rios necess√°rios se n√£o existirem
mkdir -p ssl
mkdir -p logs

echo "üèóÔ∏è Construindo imagens Docker..."

# Build da imagem
docker-compose -f docker-compose.prod.yml build --no-cache

echo "üõë Parando containers antigos..."

# Parar containers antigos
docker-compose -f docker-compose.prod.yml down

echo "üîÑ Removendo imagens antigas..."

# Cleanup de imagens antigas
docker image prune -f

echo "üöÄ Iniciando containers em produ√ß√£o..."

# Iniciar containers
docker-compose -f docker-compose.prod.yml up -d

echo "‚è≥ Aguardando containers ficarem prontos..."

# Aguardar containers ficarem healthy
sleep 30

echo "üîç Verificando status dos containers..."

# Verificar status
docker-compose -f docker-compose.prod.yml ps

echo "üè• Testando health check..."

# Testar endpoint de health
for i in {1..10}; do
    if curl -f http://localhost/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ API est√° respondendo!${NC}"
        break
    else
        echo "Tentativa $i/10 - Aguardando API ficar dispon√≠vel..."
        sleep 5
    fi
done

echo "üìä Logs dos containers:"
docker-compose -f docker-compose.prod.yml logs --tail=20

echo -e "${GREEN}üéâ Deploy conclu√≠do com sucesso!${NC}"
echo ""
echo "üìç Endpoints dispon√≠veis:"
echo "   - Health Check: http://localhost/health"
echo "   - Remove Background: http://localhost/remove-background"  
echo "   - Batch Remove: http://localhost/batch-remove"
echo "   - API Info: http://localhost/"
echo ""
echo "üì± Comandos √∫teis:"
echo "   - Ver logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   - Parar: docker-compose -f docker-compose.prod.yml down"
echo "   - Restart: docker-compose -f docker-compose.prod.yml restart"
echo "   - Status: docker-compose -f docker-compose.prod.yml ps"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è Lembre-se de configurar SSL para HTTPS em produ√ß√£o!${NC}"
